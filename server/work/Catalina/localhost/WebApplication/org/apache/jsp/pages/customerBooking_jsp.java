/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-11-20 11:37:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import xenum.CarType;
import adt.ArrList;
import main.Datas;
import main.WebConfig;

public final class customerBooking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("main.Datas");
    _jspx_imports_classes.add("main.WebConfig");
    _jspx_imports_classes.add("adt.ArrList");
    _jspx_imports_classes.add("xenum.CarType");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
String pages = (String) Datas.settings.getValue("widget/cartype-select");
      out.write('\r');
      out.write('\n');
 ArrList<CarType> types = new ArrList(xenum.CarType.values());
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.META_URL + (( main.WebConfig.META_URL).indexOf('?')>0? '&': '?') + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("Home", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("        <style>\r\n");
      out.write("            #map {\r\n");
      out.write("                height: 600px;\r\n");
      out.write("                /* The height is 600 pixels */\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                /* The width is the width of the web page */\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .pac-input {\r\n");
      out.write("                text-overflow: ellipsis;\r\n");
      out.write("                position:relative;\r\n");
      out.write("                width: 30%;\r\n");
      out.write("                margin-top: 12px;\r\n");
      out.write("                margin-right: 12px;\r\n");
      out.write("            }\r\n");
      out.write("            #form-to{\r\n");
      out.write("                margin-left: 12px;\r\n");
      out.write("            }\r\n");
      out.write("        </style>\r\n");
      out.write("        <link href=\"../theme/lib/full-page.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.HEADER_URL, out, false);
      out.write("\r\n");
      out.write("        <!--The div element for the map -->\r\n");
      out.write("\r\n");
      out.write("        <div id=\"map\"></div>\r\n");
      out.write("        <a id=\"logo-map\" class=\"\" href=\"");
      out.print( getServletContext().getInitParameter("DomainName"));
      out.write("\">\r\n");
      out.write("            <img style=\"margin:12px\" src=\"");
      out.print( Datas.settings.getValue("image/logo"));
      out.write("\" alt=\"Rent Car\" width=\"64\" height=\"50\">\r\n");
      out.write("        </a>\r\n");
      out.write("        <input\r\n");
      out.write("            id=\"pac-input-form\"\r\n");
      out.write("            class=\"pac-input form-control\"\r\n");
      out.write("            type=\"text\"\r\n");
      out.write("            placeholder=\"Form Location (Current)\"\r\n");
      out.write("            />\r\n");
      out.write("        <input\r\n");
      out.write("            id=\"pac-input-to\"\r\n");
      out.write("            class=\"pac-input form-control\"\r\n");
      out.write("            type=\"text\"\r\n");
      out.write("            placeholder=\"To \"\r\n");
      out.write("            />\r\n");
      out.write("        <button disabled=\"true\" style=\"margin-bottom: 30px\" id=\"procide-booking\" type=\"button\" id=\"submit\" class=\"btn btn-lg btn-rent\" data-toggle=\"modal\" data-target=\"#myModal\">\r\n");
      out.write("            Confirm Location\r\n");
      out.write("        </button>\r\n");
      out.write("\r\n");
      out.write("        <form method=\"post\" onsubmit=\"\">\r\n");
      out.write("            <input type=\"hidden\" id=\"form-latlng\" name=\"form-latlng\" value=\"null\"/>\r\n");
      out.write("            <input type=\"hidden\" id=\"to-latlng\" name=\"to-latlng\" value=\"null\"/>\r\n");
      out.write("\r\n");
      out.write("            <!-- Modal -->\r\n");
      out.write("            <div class=\"modal fade\" id=\"myModal\" role=\"dialog\">\r\n");
      out.write("                <div class=\"modal-dialog\">\r\n");
      out.write("\r\n");
      out.write("                    <!-- Modal content-->\r\n");
      out.write("                    <div class=\"modal-content\">\r\n");
      out.write("                        <div class=\"modal-header\">\r\n");
      out.write("                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n");
      out.write("                            <h4 class=\"modal-title\">\r\n");
      out.write("                                Start Booking\r\n");
      out.write("                            </h4>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"modal-body\">\r\n");
      out.write("                            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  pages, out, false);
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"modal-footer\">\r\n");
      out.write("                            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("                            <input id=\"booking-btn\" type=\"submit\" class=\"btn btn-rent\" value=\"Book Just Rent\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("        <div class=\"btn-group\" id=\"form-to\">\r\n");
      out.write("            <button id=\"form-btn\" type=\"button\" class=\"btn btn-default\">\r\n");
      out.write("                <img alt=\"Form\" src=\"");
      out.print( WebConfig.IMG_URL + "pin-blue.png");
      out.write("\"/> Form\r\n");
      out.write("            </button>\r\n");
      out.write("            <button id=\"to-btn\" type=\"button\" class=\"btn btn-default\">\r\n");
      out.write("                <img alt=\"Form\" src=\"");
      out.print( WebConfig.IMG_URL + "pin-red.png");
      out.write("\"/> To\r\n");
      out.write("            </button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.FOOTER_URL, out, false);
      out.write("\r\n");
      out.write("        <script\r\n");
      out.write("            src=\"https://maps.googleapis.com/maps/api/js?key=");
      out.print( main.WebConfig.api_key);
      out.write("&callback=initMap&libraries=places&v=weekly&language=en&region=MY_en\"\r\n");
      out.write("            defer\r\n");
      out.write("        ></script>\r\n");
      out.write("        <script>\r\n");
      out.write("\r\n");
      out.write("            function initMap() {\r\n");
      out.write("                const klLatLng = {lat: 4.2105, lng: 101.9758};\r\n");
      out.write("                const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n");
      out.write("                    zoom: 12,\r\n");
      out.write("                    center: klLatLng,\r\n");
      out.write("                    animation: google.maps.Animation.DROP,\r\n");
      out.write("                    mapTypeId: \"roadmap\"\r\n");
      out.write("                });\r\n");
      out.write("                const marker_form = new google.maps.Marker({\r\n");
      out.write("                    position: klLatLng,\r\n");
      out.write("                    map,\r\n");
      out.write("                    animation: google.maps.Animation.DROP,\r\n");
      out.write("                    title: \"Form\",\r\n");
      out.write("                    icon: {\r\n");
      out.write("                        url: \"");
      out.print( WebConfig.IMG_URL + "pin-blue.png");
      out.write("\"\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                const marker_to = new google.maps.Marker({\r\n");
      out.write("                    position: klLatLng,\r\n");
      out.write("                    map,\r\n");
      out.write("                    title: \"To Here\",\r\n");
      out.write("                    icon: {\r\n");
      out.write("                        url: \"");
      out.print( WebConfig.IMG_URL + "pin-red.png");
      out.write("\"\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                // Create the search box and link it to the UI element.\r\n");
      out.write("                var focus_form = false;\r\n");
      out.write("                const geocoder = new google.maps.Geocoder();\r\n");
      out.write("                const malaysia = {componentRestrictions: {country: 'my'}};\r\n");
      out.write("                const booking = document.getElementById(\"procide-booking\");\r\n");
      out.write("                const input_form = document.getElementById(\"pac-input-form\");\r\n");
      out.write("                const input_to = document.getElementById(\"pac-input-to\");\r\n");
      out.write("                const input_form_lat = document.getElementById(\"form-latlng\");\r\n");
      out.write("                const input_to_lat = document.getElementById(\"to-latlng\");\r\n");
      out.write("                const btn_ft = document.getElementById(\"form-to\");\r\n");
      out.write("                const logo_map = document.getElementById(\"logo-map\");\r\n");
      out.write("                const dist_map = document.getElementById(\"map-distance\");\r\n");
      out.write("                const time_map = document.getElementById(\"map-time\");\r\n");
      out.write("                const searchBox_form = new google.maps.places.SearchBox(input_form);\r\n");
      out.write("                const searchBox_to = new google.maps.places.SearchBox(input_to);\r\n");
      out.write("                const polylineOptionsActual = new google.maps.Polyline({strokeColor: '#ff1a4b', strokeOpacity: 0.8, strokeWeight: 6});\r\n");
      out.write("                const directionsRenderer = new google.maps.DirectionsRenderer\r\n");
      out.write("                        ({suppressMarkers: true, polylineOptions: polylineOptionsActual});\r\n");
      out.write("                const directionsService = new google.maps.DirectionsService();\r\n");
      out.write("                const service = new google.maps.DistanceMatrixService();\r\n");
      out.write("                const outputDiv = document.getElementById(\"map-note\");\r\n");
      out.write("                map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(booking);\r\n");
      out.write("                map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(btn_ft);\r\n");
      out.write("                map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(logo_map);\r\n");
      out.write("                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_form);\r\n");
      out.write("                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_to);\r\n");
      out.write("                directionsRenderer.setMap(map);\r\n");
      out.write("                if (navigator.geolocation) {\r\n");
      out.write("                    navigator.geolocation.getCurrentPosition(\r\n");
      out.write("                            (position) => {\r\n");
      out.write("                        const pos = {\r\n");
      out.write("                            lat: position.coords.latitude,\r\n");
      out.write("                            lng: position.coords.longitude\r\n");
      out.write("                        };\r\n");
      out.write("                        marker_form.setPosition(pos);\r\n");
      out.write("                        map.setCenter(pos);\r\n");
      out.write("                    },\r\n");
      out.write("                            () => {\r\n");
      out.write("                        handleLocationError(true, infoWindow, map.getCenter(), map);\r\n");
      out.write("                    }\r\n");
      out.write("                    );\r\n");
      out.write("                } else {\r\n");
      out.write("                    // Browser doesn't support Geolocation\r\n");
      out.write("                    handleLocationError(false, infoWindow, map.getCenter(), map);\r\n");
      out.write("                }\r\n");
      out.write("                booking.addEventListener(\"click\", (mapsMouseEvent) => {\r\n");
      out.write("                    distanceMatricApix(marker_form, marker_to,\r\n");
      out.write("                            service, dist_map, time_map, outputDiv);\r\n");
      out.write("                });\r\n");
      out.write("                map.addListener(\"click\", (mapsMouseEvent) => {\r\n");
      out.write("                    if (focus_form) {\r\n");
      out.write("                        marker_form.setPosition(mapsMouseEvent.latLng);\r\n");
      out.write("                        reverseLatLng(geocoder, input_form, marker_form, map);\r\n");
      out.write("                        fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                        writeToInput(marker_form.getPosition(), input_form_lat);\r\n");
      out.write("                        calculateAndDisplayRoute(directionsService, directionsRenderer,\r\n");
      out.write("                                marker_form.getPosition(), marker_to.getPosition());\r\n");
      out.write("                    } else {\r\n");
      out.write("                        booking.disabled = false;\r\n");
      out.write("                        marker_to.setPosition(mapsMouseEvent.latLng);\r\n");
      out.write("                        reverseLatLng(geocoder, input_to, marker_to, map);\r\n");
      out.write("                        fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                        writeToInput(marker_to.getPosition(), input_to_lat);\r\n");
      out.write("                        calculateAndDisplayRoute(directionsService, directionsRenderer,\r\n");
      out.write("                                marker_form.getPosition(), marker_to.getPosition());\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                // Listen for the event fired when the user selects a prediction and retrieve\r\n");
      out.write("                // more details for that place.\r\n");
      out.write("                searchBox_form.addListener(\"places_changed\", () => {\r\n");
      out.write("                    focus_form = true;\r\n");
      out.write("                    search(searchBox_form, marker_form, map);\r\n");
      out.write("                    fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                    writeToInput(marker_form.getPosition(), input_form_lat);\r\n");
      out.write("                    calculateAndDisplayRoute(directionsService, directionsRenderer,\r\n");
      out.write("                            marker_form.getPosition(), marker_to.getPosition());\r\n");
      out.write("                });\r\n");
      out.write("                searchBox_to.addListener(\"places_changed\", () => {\r\n");
      out.write("                    focus_form = false;\r\n");
      out.write("                    booking.disabled = false;\r\n");
      out.write("                    search(searchBox_to, marker_to, map);\r\n");
      out.write("                    fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                    writeToInput(marker_to.getPosition(), input_to_lat);\r\n");
      out.write("                    calculateAndDisplayRoute(directionsService, directionsRenderer,\r\n");
      out.write("                            marker_form.getPosition(), marker_to.getPosition());\r\n");
      out.write("                });\r\n");
      out.write("                marker_form.addListener(\"click\", (mapsMouseEvent) => {\r\n");
      out.write("                    focus_form = true;\r\n");
      out.write("                    setFocusBtn(focus_form);\r\n");
      out.write("                    fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                });\r\n");
      out.write("                marker_to.addListener(\"click\", (mapsMouseEvent) => {\r\n");
      out.write("                    focus_form = false;\r\n");
      out.write("                    setFocusBtn(focus_form);\r\n");
      out.write("                    fitCurrentBound(marker_form.getPosition(), marker_to.getPosition(), map);\r\n");
      out.write("                });\r\n");
      out.write("                reverseLatLng(geocoder, input_to, marker_to, map);\r\n");
      out.write("                writeToInput(marker_form.getPosition(), input_form_lat);\r\n");
      out.write("                setFocusBtn(focus_form);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function calculateAll() {\r\n");
      out.write("                const dist_map = document.getElementById(\"map-distance\");\r\n");
      out.write("                const time_map = document.getElementById(\"map-time\");\r\n");
      out.write("            ");
for (int i = 0; i < types.size(); i++) {
      out.write("\r\n");
      out.write("                calculatePrice('price_");
      out.print( i);
      out.write('\'');
      out.write(',');
      out.write(' ');
      out.print( types.get(i).getBase_fair_price());
      out.write(',');
      out.write(' ');
      out.print( types.get(i).getMinimum_price());
      out.write(",\r\n");
      out.write("            ");
      out.print( types.get(i).getPrice_per_km());
      out.write(',');
      out.write(' ');
      out.print( types.get(i).getPrice_per_min());
      out.write(", dist_map, time_map) + \"\\n\";\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("                alert(data);\r\n");
      out.write("            }\r\n");
      out.write("            function calculatePrice(element_id, base_fare, min_fare, per_km, per_min, dist_map, time_map) {\r\n");
      out.write("                const output = document.getElementById(element_id);\r\n");
      out.write("                var price_no_base = (dist_map.value * per_km / 1000) + (time_map.value * per_min / 60);\r\n");
      out.write("                var price = (dist_map.value * per_km / 1000) + (time_map.value * per_min / 60) + base_fare;\r\n");
      out.write("                price = price >= min_fare ? price : min_fare;\r\n");
      out.write("                price_no_base = price_no_base >= min_fare ? price_no_base : min_fare;\r\n");
      out.write("                if (price_no_base.toFixed() == price.toFixed())\r\n");
      out.write("                    document.getElementById(element_id).innerHTML = \"<b class='text-success'>RM \" +\r\n");
      out.write("                            price.toFixed(2) + \"</b>\";\r\n");
      out.write("                else\r\n");
      out.write("                    document.getElementById(element_id).innerHTML = \"<b class='text-success'>RM \" +\r\n");
      out.write("                            price_no_base.toFixed(2) + \" - \" + price.toFixed(2) + \"</b>\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function distanceMatricApix(origin, destination, service, dist_map, time_map, outputDiv) {\r\n");
      out.write("\r\n");
      out.write("                service.getDistanceMatrix({\r\n");
      out.write("                    origins: [origin.getPosition()],\r\n");
      out.write("                    destinations: [destination.getPosition()],\r\n");
      out.write("                    travelMode: google.maps.TravelMode.DRIVING,\r\n");
      out.write("                    unitSystem: google.maps.UnitSystem.METRIC,\r\n");
      out.write("                    avoidHighways: false,\r\n");
      out.write("                    avoidTolls: false\r\n");
      out.write("                }, (response, status) => {\r\n");
      out.write("                    if (status !== \"OK\") {\r\n");
      out.write("                        alert(\"Error was: \" + status);\r\n");
      out.write("                    }\r\n");
      out.write("                    dist_map.value = 0;\r\n");
      out.write("                    time_map.value = 0;\r\n");
      out.write("                    outputDiv.innerHTML = \"\";\r\n");
      out.write("                    const originList = response.originAddresses;\r\n");
      out.write("                    const destinationList = response.destinationAddresses;\r\n");
      out.write("                    for (let i = 0; i < originList.length; i++) {\r\n");
      out.write("                        const results = response.rows[i].elements;\r\n");
      out.write("                        for (let j = 0; j < results.length; j++) {\r\n");
      out.write("                            if (results[j].status !== \"OK\") {\r\n");
      out.write("                                alert(\"Error was: \" + status);\r\n");
      out.write("                            }\r\n");
      out.write("                            dist_map.value += results[j].distance.value;\r\n");
      out.write("                            time_map.value += results[j].duration.value;\r\n");
      out.write("                            outputDiv.innerHTML += \"<p>From <span style='color:#1a71ff'>\" +\r\n");
      out.write("                                    originList[i] +\r\n");
      out.write("                                    \"</span> to <span style='color:#ff1a4b'>\" +\r\n");
      out.write("                                    destinationList[j] +\r\n");
      out.write("                                    \"</span></p>distance: <i>\" +\r\n");
      out.write("                                    results[j].distance.text +\r\n");
      out.write("                                    \"</i><span class='pull-right'><b>time estimate: \" +\r\n");
      out.write("                                    results[j].duration.text +\r\n");
      out.write("                                    \"</b><br></span>\";\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                    calculateAll();\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function handleLocationError(browserHasGeolocation, infoWindow, pos, map) {\r\n");
      out.write("                infoWindow.setPosition(pos);\r\n");
      out.write("                infoWindow.setContent(\r\n");
      out.write("                        browserHasGeolocation\r\n");
      out.write("                        ? \"Error: The Geolocation service failed.\"\r\n");
      out.write("                        : \"Error: Your browser doesn't support geolocation.\"\r\n");
      out.write("                        );\r\n");
      out.write("                infoWindow.open(map);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function calculateAndDisplayRoute(directionsService, directionsRenderer, origin_p, destination_p) {\r\n");
      out.write("                directionsService.route(\r\n");
      out.write("                        {\r\n");
      out.write("                            origin: origin_p,\r\n");
      out.write("                            destination: destination_p,\r\n");
      out.write("                            travelMode: google.maps.TravelMode['DRIVING'],\r\n");
      out.write("                        },\r\n");
      out.write("                        (response, status) => {\r\n");
      out.write("                    if (status == \"OK\") {\r\n");
      out.write("                        directionsRenderer.setDirections(response);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        window.alert(\"Directions request failed due to \" + status);\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                );\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function setFocusBtn(focus_form) {\r\n");
      out.write("                const input_form_btn = document.getElementById(\"form-btn\");\r\n");
      out.write("                const input_to_btn = document.getElementById(\"to-btn\");\r\n");
      out.write("                if (focus_form) {\r\n");
      out.write("                    input_form_btn.disabled = false;\r\n");
      out.write("                    input_to_btn.disabled = true;\r\n");
      out.write("                } else {\r\n");
      out.write("                    input_form_btn.disabled = true;\r\n");
      out.write("                    input_to_btn.disabled = false;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            function writeToInput(position, input_latlng) {\r\n");
      out.write("                input_latlng.value = JSON.stringify(position.toJSON(), null, 2);\r\n");
      out.write("            }\r\n");
      out.write("            function reverseLatLng(geocoder, input, marker, map) {\r\n");
      out.write("                const position = marker.getPosition();\r\n");
      out.write("                geocoder.geocode({location: position}, (results, status) => {\r\n");
      out.write("                    if (status === \"OK\") {\r\n");
      out.write("                        if (results[0]) {\r\n");
      out.write("                            input.value = results[0].formatted_address;\r\n");
      out.write("                        } else {\r\n");
      out.write("                            window.alert(\"No results found\");\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        window.alert(\"Geocoder failed due to: \" + status);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("            function fitCurrentBound(form, to, map) {\r\n");
      out.write("                var bounds = new google.maps.LatLngBounds();\r\n");
      out.write("                bounds.extend(form);\r\n");
      out.write("                bounds.extend(to);\r\n");
      out.write("                map.fitBounds(bounds);\r\n");
      out.write("            }\r\n");
      out.write("            function search(searchBox, marker, map) {\r\n");
      out.write("                const places = searchBox.getPlaces();\r\n");
      out.write("\r\n");
      out.write("                if (places.length == 0) {\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                // For each place, get the icon, name and location.\r\n");
      out.write("                const bounds = new google.maps.LatLngBounds();\r\n");
      out.write("                places.forEach((place) => {\r\n");
      out.write("                    if (!place.geometry) {\r\n");
      out.write("                        console.log(\"Returned place contains no geometry\");\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("                    marker.setPosition(place.geometry.location);\r\n");
      out.write("\r\n");
      out.write("                    if (place.geometry.viewport) {\r\n");
      out.write("                        // Only geocodes have viewport.\r\n");
      out.write("                        bounds.union(place.geometry.viewport);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        bounds.extend(place.geometry.location);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                map.fitBounds(bounds);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            $(document).ready(function () {\r\n");
      out.write("                $(\"#pac-input-to\").click(function () {\r\n");
      out.write("                    setFocusBtn(false);\r\n");
      out.write("                });\r\n");
      out.write("                $(\"#pac-input-form\").click(function () {\r\n");
      out.write("                    setFocusBtn(true);\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
