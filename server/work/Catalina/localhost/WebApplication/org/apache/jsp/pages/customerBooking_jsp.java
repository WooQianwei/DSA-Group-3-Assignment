/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-11-19 10:36:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class customerBooking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.META_URL + (( main.WebConfig.META_URL).indexOf('?')>0? '&': '?') + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("Home", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("        <style>\r\n");
      out.write("            #map {\r\n");
      out.write("                height: 600px;\r\n");
      out.write("                /* The height is 600 pixels */\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                /* The width is the width of the web page */\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #pac-input {\r\n");
      out.write("                text-overflow: ellipsis;\r\n");
      out.write("                position:relative;\r\n");
      out.write("                width: 80%;\r\n");
      out.write("                margin-top: 10px;\r\n");
      out.write("            }\r\n");
      out.write("        </style>\r\n");
      out.write("        <link href=\"../theme/lib/full-page.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.HEADER_URL, out, false);
      out.write("\r\n");
      out.write("        <!--The div element for the map -->\r\n");
      out.write("        <input\r\n");
      out.write("            id=\"pac-input\"\r\n");
      out.write("            class=\"form-control\"\r\n");
      out.write("            type=\"text\"\r\n");
      out.write("            placeholder=\"Search Box\"\r\n");
      out.write("            />\r\n");
      out.write("        <div id=\"map\"></div>\r\n");
      out.write("\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  main.WebConfig.FOOTER_URL, out, false);
      out.write("\r\n");
      out.write("        <script\r\n");
      out.write("            src=\"https://maps.googleapis.com/maps/api/js?key=");
      out.print( main.WebConfig.api_key);
      out.write("&callback=initMap&libraries=places&v=weekly\"\r\n");
      out.write("            defer\r\n");
      out.write("        ></script>\r\n");
      out.write("        <script>\r\n");
      out.write("            function initMap() {\r\n");
      out.write("                const myLatLng = {lat: 4.2105, lng: 101.9758};\r\n");
      out.write("                const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n");
      out.write("                    zoom: 8,\r\n");
      out.write("                    center: myLatLng,\r\n");
      out.write("                    mapTypeId: \"roadmap\",\r\n");
      out.write("                });\r\n");
      out.write("                const marker = new google.maps.Marker({\r\n");
      out.write("                    position: myLatLng,\r\n");
      out.write("                    map,\r\n");
      out.write("                    title: \"Click to zoom\",\r\n");
      out.write("                });\r\n");
      out.write("                map.addListener(\"click\", (mapsMouseEvent) => {\r\n");
      out.write("                    // 3 seconds after the center of the map has changed, pan back to the\r\n");
      out.write("                    // marker.\r\n");
      out.write("                    marker.setPosition(mapsMouseEvent.latLng);\r\n");
      out.write("                });\r\n");
      out.write("                marker.addListener(\"click\", () => {\r\n");
      out.write("                    map.setZoom(8);\r\n");
      out.write("                    map.setCenter(marker.getPosition());\r\n");
      out.write("                });\r\n");
      out.write("                // Create the search box and link it to the UI element.\r\n");
      out.write("                const input = document.getElementById(\"pac-input\");\r\n");
      out.write("                const searchBox = new google.maps.places.SearchBox(input);\r\n");
      out.write("                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n");
      out.write("                // Bias the SearchBox results towards current map's viewport.\r\n");
      out.write("                map.addListener(\"bounds_changed\", () => {\r\n");
      out.write("                    searchBox.setBounds(map.getBounds());\r\n");
      out.write("                });\r\n");
      out.write("                // Listen for the event fired when the user selects a prediction and retrieve\r\n");
      out.write("                // more details for that place.\r\n");
      out.write("                searchBox.addListener(\"places_changed\", () => {\r\n");
      out.write("                    const places = searchBox.getPlaces();\r\n");
      out.write("\r\n");
      out.write("                    if (places.length == 0) {\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("                    // For each place, get the icon, name and location.\r\n");
      out.write("                    const bounds = new google.maps.LatLngBounds();\r\n");
      out.write("                    places.forEach((place) => {\r\n");
      out.write("                        if (!place.geometry) {\r\n");
      out.write("                        console.log(\"Returned place contains no geometry\");\r\n");
      out.write("                                return;\r\n");
      out.write("                        }\r\n");
      out.write("                        marker.setPosition(place.geometry.location);\r\n");
      out.write("\r\n");
      out.write("                        if (place.geometry.viewport) {\r\n");
      out.write("                            // Only geocodes have viewport.\r\n");
      out.write("                            bounds.union(place.geometry.viewport);\r\n");
      out.write("                        } else {\r\n");
      out.write("                            bounds.extend(place.geometry.location);\r\n");
      out.write("                        }\r\n");
      out.write("                    });\r\n");
      out.write("                    map.fitBounds(bounds);\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
